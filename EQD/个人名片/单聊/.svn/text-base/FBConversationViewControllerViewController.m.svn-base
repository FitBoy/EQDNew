//
//  FBConversationViewControllerViewController.m
//  YiQiDian
//
//  Created by 梁新帅 on 2017/3/1.
//  Copyright © 2017年 FitBoy. All rights reserved.
//

#import "FBConversationViewControllerViewController.h"
#import "FBActivityViewController.h"
#import "ExActivity.h"
#import "FBGeRenCardMessageContent.h"
#import "FBMessageCell.h"
#import "CardChooseViewController.h"
#import "RealTimeLocationEndCell.h"
#import "RealTimeLocationStartCell.h"
#import "RealTimeLocationStatusView.h"
#import "RealTimeLocationViewController.h"
@interface FBConversationViewControllerViewController ()<UIActionSheetDelegate, RCRealTimeLocationObserver,
RealTimeLocationStatusViewDelegate, UIAlertViewDelegate,
RCMessageCellDelegate>
{
    RCMessageModel  *M_model;
    FBGeRenCardMessageContent *content ;
}
@property(nonatomic, weak) id<RCRealTimeLocationProxy> realTimeLocation;
@property(nonatomic, strong)
RealTimeLocationStatusView *realTimeLocationStatusView;

@end

@implementation FBConversationViewControllerViewController
-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
   
    self.navigationController.navigationBarHidden=NO;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor =[UIColor whiteColor];
//     self.displayConversationTypeArray = @[@(ConversationType_PRIVATE),@(ConversationType_GROUP)];
    self.conversationType = ConversationType_PRIVATE;
    self.enableUnreadMessageIcon =YES;
    self.displayUserNameInCell=YES;
    self.enableNewComingMessageIcon=YES;
    [RCIM sharedRCIM].enableTypingStatus =YES;
    [RCIM sharedRCIM].enableSyncReadStatus=YES;
    [self.chatSessionInputBarControl.pluginBoardView insertItemWithImage:[UIImage imageNamed:@"renwu.png"] title:@"发任务" atIndex:5 tag:4001];
    [self.chatSessionInputBarControl.pluginBoardView insertItemWithImage:[RCKitUtility imageNamed:@"card.png" ofBundle:@"RongCloud.bundle"] title:@"个人名片" atIndex:6 tag:4002];
    [self notifyUpdateUnreadMessageCount];
    
    
    [[RCIM sharedRCIM] registerMessageType:[FBGeRenCardMessageContent class]];
    [self.conversationMessageCollectionView registerClass:[FBMessageCell class] forCellWithReuseIdentifier:@"FBMessageBaseCell"];
    [self registerClass:[FBMessageCell class] forMessageClass:[FBGeRenCardMessageContent class]];
    
    /*******************实时地理位置共享***************/
    [self registerClass:[RealTimeLocationStartCell class]
        forMessageClass:[RCRealTimeLocationStartMessage class]];
    [self registerClass:[RealTimeLocationEndCell class]
        forMessageClass:[RCRealTimeLocationEndMessage class]];
    
    __weak typeof(&*self) weakSelf = self;
    [[RCRealTimeLocationManager sharedManager]
     getRealTimeLocationProxy:self.conversationType
     targetId:self.targetId
     success:^(id<RCRealTimeLocationProxy> realTimeLocation) {
         weakSelf.realTimeLocation = realTimeLocation;
         [weakSelf.realTimeLocation addRealTimeLocationObserver:self];
         [weakSelf updateRealTimeLocationStatus];
     }
     error:^(RCRealTimeLocationErrorCode status) {
         NSLog(@"get location share failure with code %d", (int)status);
     }];
    
    
    /******************实时地理位置共享**************/
    
  
}
#pragma mark override
- (void)resendMessage:(RCMessageContent *)messageContent {
    if ([messageContent isKindOfClass:[RCRealTimeLocationStartMessage class]]) {
        [self showRealTimeLocationViewController];
    } else {
        [super resendMessage:messageContent];
    }
}

#pragma mark - RCRealTimeLocationObserver
- (void)onRealTimeLocationStatusChange:(RCRealTimeLocationStatus)status {
    __weak typeof(&*self) weakSelf = self;
    dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf updateRealTimeLocationStatus];
    });
}

- (void)onReceiveLocation:(CLLocation *)location fromUserId:(NSString *)userId {
    __weak typeof(&*self) weakSelf = self;
    dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf updateRealTimeLocationStatus];
    });
}

- (void)onParticipantsJoin:(NSString *)userId {
    __weak typeof(&*self) weakSelf = self;
    if ([userId isEqualToString:[RCIMClient sharedRCIMClient]
         .currentUserInfo.userId]) {
        [self notifyParticipantChange:@"你加入了地理位置共享"];
    } else {
        [[RCIM sharedRCIM]
         .userInfoDataSource
         getUserInfoWithUserId:userId
         completion:^(RCUserInfo *userInfo) {
             if (userInfo.name.length) {
                 [weakSelf
                  notifyParticipantChange:
                  [NSString stringWithFormat:@"%@加入地理位置共享",
                   userInfo.name]];
             } else {
                 [weakSelf
                  notifyParticipantChange:
                  [NSString
                   stringWithFormat:@"user<%@>加入地理位置共享",
                   userId]];
             }
         }];
    }
}

- (void)onParticipantsQuit:(NSString *)userId {
    __weak typeof(&*self) weakSelf = self;
    if ([userId isEqualToString:[RCIMClient sharedRCIMClient]
         .currentUserInfo.userId]) {
        [self notifyParticipantChange:@"你退出地理位置共享"];
    } else {
        [[RCIM sharedRCIM]
         .userInfoDataSource
         getUserInfoWithUserId:userId
         completion:^(RCUserInfo *userInfo) {
             if (userInfo.name.length) {
                 [weakSelf
                  notifyParticipantChange:
                  [NSString stringWithFormat:@"%@退出地理位置共享",
                   userInfo.name]];
             } else {
                 [weakSelf
                  notifyParticipantChange:
                  [NSString
                   stringWithFormat:@"user<%@>退出地理位置共享",
                   userId]];
             }
         }];
    }
}

- (void)onRealTimeLocationStartFailed:(long)messageId {
    dispatch_async(dispatch_get_main_queue(), ^{
        for (int i = 0; i < self.conversationDataRepository.count; i++) {
            RCMessageModel *model = [self.conversationDataRepository objectAtIndex:i];
            if (model.messageId == messageId) {
                model.sentStatus = SentStatus_FAILED;
            }
        }
        NSArray *visibleItem =
        [self.conversationMessageCollectionView indexPathsForVisibleItems];
        for (int i = 0; i < visibleItem.count; i++) {
            NSIndexPath *indexPath = visibleItem[i];
            RCMessageModel *model =
            [self.conversationDataRepository objectAtIndex:indexPath.row];
            if (model.messageId == messageId) {
                [self.conversationMessageCollectionView
                 reloadItemsAtIndexPaths:@[ indexPath ]];
            }
        }
    });
}

- (void)notifyParticipantChange:(NSString *)text {
    __weak typeof(&*self) weakSelf = self;
    dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf.realTimeLocationStatusView updateText:text];
        [weakSelf performSelector:@selector(updateRealTimeLocationStatus)
                       withObject:nil
                       afterDelay:0.5];
    });
}

- (void)onFailUpdateLocation:(NSString *)description {
}


- (RCMessage *)willAppendAndDisplayMessage:(RCMessage *)message {
    return message;
}

#pragma mark override
- (void)didTapMessageCell:(RCMessageModel *)model {
    [super didTapMessageCell:model];
    if ([model.content isKindOfClass:[RCRealTimeLocationStartMessage class]]) {
        [self showRealTimeLocationViewController];
    }
}
#pragma mark - RealTimeLocationStatusViewDelegate
- (void)onJoin {
    [self showRealTimeLocationViewController];
}
- (RCRealTimeLocationStatus)getStatus {
    return [self.realTimeLocation getStatus];
}

- (void)onShowRealTimeLocationView {
    [self showRealTimeLocationViewController];
}

/******************实时地理位置共享**************/
- (void)showRealTimeLocationViewController {
    RealTimeLocationViewController *lsvc =
    [[RealTimeLocationViewController alloc] init];
    lsvc.realTimeLocationProxy = self.realTimeLocation;
    if ([self.realTimeLocation getStatus] ==
        RC_REAL_TIME_LOCATION_STATUS_INCOMING) {
        [self.realTimeLocation joinRealTimeLocation];
    } else if ([self.realTimeLocation getStatus] ==
               RC_REAL_TIME_LOCATION_STATUS_IDLE) {
        [self.realTimeLocation startRealTimeLocation];
    }
    [self.navigationController presentViewController:lsvc
                                            animated:YES
                                          completion:^{
                                              
                                          }];
}
- (void)updateRealTimeLocationStatus {
    if (self.realTimeLocation) {
        [self.realTimeLocationStatusView updateRealTimeLocationStatus];
        __weak typeof(&*self) weakSelf = self;
        NSArray *participants = nil;
        switch ([self.realTimeLocation getStatus]) {
            case RC_REAL_TIME_LOCATION_STATUS_OUTGOING:
                [self.realTimeLocationStatusView updateText:@"你正在共享位置"];
                break;
            case RC_REAL_TIME_LOCATION_STATUS_CONNECTED:
            case RC_REAL_TIME_LOCATION_STATUS_INCOMING:
                participants = [self.realTimeLocation getParticipants];
                if (participants.count == 1) {
                    NSString *userId = participants[0];
                    [weakSelf.realTimeLocationStatusView
                     updateText:[NSString
                                 stringWithFormat:@"user<%@>正在共享位置", userId]];
                    [[RCIM sharedRCIM]
                     .userInfoDataSource
                     getUserInfoWithUserId:userId
                     completion:^(RCUserInfo *userInfo) {
                         if (userInfo.name.length) {
                             dispatch_async(dispatch_get_main_queue(), ^{
                                 [weakSelf.realTimeLocationStatusView
                                  updateText:[NSString stringWithFormat:
                                              @"%@正在共享位置",
                                              userInfo.name]];
                             });
                         }
                     }];
                } else {
                    if (participants.count < 1)
                        [self.realTimeLocationStatusView removeFromSuperview];
                    else
                        [self.realTimeLocationStatusView
                         updateText:[NSString stringWithFormat:@"%d人正在共享地理位置",
                                     (int)participants.count]];
                }
                break;
            default:
                break;
        }
    }
}
- (void)leftBarButtonItemPressed:(id)sender {
    if ([self.realTimeLocation getStatus] ==
        RC_REAL_TIME_LOCATION_STATUS_OUTGOING ||
        [self.realTimeLocation getStatus] ==
        RC_REAL_TIME_LOCATION_STATUS_CONNECTED) {
        
        UIAlertController *alert =[UIAlertController alertControllerWithTitle:nil message: @"离开聊天，位置共享也会结束，确认离开" preferredStyle:UIAlertControllerStyleAlert];
        [alert addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
            
        }]];
        [alert addAction:[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [self.realTimeLocation quitRealTimeLocation];
            [self popupChatViewController];
        }]];

        [self presentViewController:alert animated:NO completion:nil];
    } else {
        [self popupChatViewController];
    }
}
- (void)setRealTimeLocation:(id<RCRealTimeLocationProxy>)realTimeLocation {
    _realTimeLocation = realTimeLocation;
}


- (RealTimeLocationStatusView *)realTimeLocationStatusView {
    if (!_realTimeLocationStatusView) {
        _realTimeLocationStatusView = [[RealTimeLocationStatusView alloc]
                                       initWithFrame:CGRectMake(0, 62, self.view.frame.size.width, 0)];
        _realTimeLocationStatusView.delegate = self;
        [self.view addSubview:_realTimeLocationStatusView];
    }
    return _realTimeLocationStatusView;
}

- (void)popupChatViewController {
    [super leftBarButtonItemPressed:nil];
    [self.realTimeLocation removeRealTimeLocationObserver:self];
   [self.navigationController popViewControllerAnimated:YES];

}


//长按的列表显示
- (NSArray<UIMenuItem *> *)getLongTouchMessageCellMenuList:(RCMessageModel *)model
{
    
    NSMutableArray<UIMenuItem *> *menuList =
    [[super getLongTouchMessageCellMenuList:model] mutableCopy];
    M_model = model;
    [menuList addObject:[[UIMenuItem alloc] initWithTitle:@"转发"
                                                   action:@selector(zhuanfaClick)]];
    [menuList addObject:[[UIMenuItem alloc] initWithTitle:@"转入记事本"
                                                   action:@selector(jishibenClick)]];
    [menuList addObject:[[UIMenuItem alloc] initWithTitle:@"转入任务"
                                                   action:@selector(renwuClick)]];
    [menuList addObject:[[UIMenuItem alloc] initWithTitle:@"收藏"
                                                   action:@selector(shoucangClick)]];
    [menuList addObject:[[UIMenuItem alloc] initWithTitle:@"更多"
                                                   action:@selector(moreClick)]];
    return menuList;
}
-(void)zhuanfaClick
{
    //转发
   //  RCVoiceMessage RCTextMessage RCImageMessage RCFileMessage
    
    ExActivity *activity = [[ExActivity alloc]init];
    activity.messageContent = M_model.content;
    
    if ([M_model.content isKindOfClass:[RCTextMessage class]]) {
        RCTextMessage *message =(RCTextMessage*) M_model.content;
        
        FBActivityViewController *ACvc =[[FBActivityViewController alloc]initWithActivityItems:@[message.content] applicationActivities:@[activity]];
        
        [self  presentViewController:ACvc animated:NO completion:nil];
    }
    else if([M_model.content isKindOfClass:[RCImageMessage class]])
    {
        RCImageMessage *message =(RCImageMessage*) M_model.content;
        
        UIImage *image =[[UIImage alloc]initWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:message.imageUrl]]];
        if (image==nil) {
            image=message.thumbnailImage;
        }
        
        FBActivityViewController *ACvc =[[FBActivityViewController alloc]initWithActivityItems:@[image] applicationActivities:@[activity]];
       
        [self  presentViewController:ACvc animated:NO completion:nil];
    }
    else if([M_model.content isKindOfClass:[RCFileMessage class]])
    {
        RCFileMessage *message =(RCFileMessage*) M_model.content;

        FBActivityViewController *ACvc =[[FBActivityViewController alloc]initWithActivityItems:@[message.fileUrl] applicationActivities:@[activity]];
        [self  presentViewController:ACvc animated:NO completion:nil];
    }
    else if([M_model.content isKindOfClass:[RCVoiceMessage class]])
    {
        RCVoiceMessage *message =(RCVoiceMessage*) M_model.content;
        FBActivityViewController *ACvc =[[FBActivityViewController alloc]initWithActivityItems:@[message.wavAudioData] applicationActivities:@[activity]];
        [self  presentViewController:ACvc animated:NO completion:nil];
    }
    else
    {
        FBActivityViewController *ACvc =[[FBActivityViewController alloc]initWithActivityItems:@[@"易企点暂时不支持此消息转发"] applicationActivities:@[activity]];
        [self  presentViewController:ACvc animated:NO completion:nil];
    }
    
    
}
-(void)jishibenClick
{
    //转入记事本
}
-(void)renwuClick
{
    //转入任务
    
}
-(void)shoucangClick
{
    //收藏
}
-(void)moreClick
{
    //更多
}

/*
点击Cell中头像的回调
 
 @param userId  点击头像对应的用户ID
 */
- (void)didTapCellPortrait:(NSString *)userId{
    
}


- (void)didSendMessage:(NSInteger)status
               content:(RCMessageContent *)messageContent
{
    //消息发送完回调   转发也是同样的逻辑
    [super didSendMessage:status content:messageContent];
    
}

-(void)pluginBoardView:(RCPluginBoardView*)pluginBoardView
    clickedItemWithTag:(NSInteger)tag{
    switch (tag) {
            
        case PLUGIN_BOARD_ITEM_LOCATION_TAG: {
            if (self.realTimeLocation) {
                UIAlertController *alert = [[UIAlertController alloc]init];
                [alert addAction:[UIAlertAction actionWithTitle:@"发送位置" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                    [super pluginBoardView:self.chatSessionInputBarControl.pluginBoardView
                        clickedItemWithTag:PLUGIN_BOARD_ITEM_LOCATION_TAG];
                }]];
                [alert addAction:[UIAlertAction actionWithTitle:@"位置实时共享" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                     [self showRealTimeLocationViewController];
                }]];
                [alert addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                    
                }]];
                
                [self presentViewController:alert animated:NO completion:nil];
                
            } else {
                [super pluginBoardView:pluginBoardView clickedItemWithTag:tag];
            }
            
        }
            break;
        
   
    
            
        case 4001:
        {
            //发任务
        }
            break;
        case 4002:
        {
           //个人名片
            [WebRequest user_enterWithu1:[USERDEFAULTS objectForKey:Y_Zhanghao] u2:[USERDEFAULTS objectForKey:Y_MIMA] uid:self.targetId And:^(NSDictionary *dic) {
                if ([dic[Y_STATUS] integerValue]==200) {
                    
                    NSArray *arr = dic[Y_ITEMS];
                    NSDictionary *dic1 =arr[0];
                    UserModel *model = [UserModel mj_objectWithKeyValues:dic1];
                    
                    CardChooseViewController *Cvc =[[CardChooseViewController alloc]init];
                    Cvc.model = model;
                    dispatch_async(dispatch_get_main_queue(), ^{
                      [self.navigationController pushViewController:Cvc animated:NO];
                    });
                    
                    
                    
                }
            }];
            
            
        }
            break;
            
        default:
             [super pluginBoardView:pluginBoardView clickedItemWithTag:tag];
            break;
    }
    
}





- (RCMessageBaseCell *)rcConversationCollectionView:(UICollectionView *)collectionView
                             cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    [super rcConversationCollectionView:collectionView cellForItemAtIndexPath:indexPath];
    
    
  FBMessageCell *cell1 = [collectionView dequeueReusableCellWithReuseIdentifier:@"FBMessageBaseCell" forIndexPath:indexPath];
    RCMessageModel *model =self.conversationDataRepository[indexPath.row];
    if ([model.content isKindOfClass:[FBGeRenCardMessageContent class]]) {
         [cell1 setModel:model];
    }
   
    
    return cell1;
}



-(void)willDisplayMessageCell:(RCMessageBaseCell *)cell atIndexPath:(NSIndexPath *)indexPath
{
    if ([cell isKindOfClass:[FBMessageCell class]]) {
        FBMessageCell *cell0 = (FBMessageCell*)cell;
        RCMessageModel *model =self.conversationDataRepository[indexPath.row];
        [cell0 setModel:model];

}
}


- (CGSize)rcConversationCollectionView:(UICollectionView *)collectionView
                                layout:(UICollectionViewLayout *)collectionViewLayout
                sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    CGSize size =[super rcConversationCollectionView:collectionView layout:collectionViewLayout sizeForItemAtIndexPath:indexPath];
    size.height+=66;
    
    return size;
}
- (void)notifyUpdateUnreadMessageCount {
    [super notifyUpdateUnreadMessageCount];
    __weak typeof(&*self) __weakself = self;
    int count = [[RCIMClient sharedRCIMClient] getUnreadCount:@[
                                                                @(ConversationType_PRIVATE),
                                                                @(ConversationType_GROUP)
                                                                ]];
    dispatch_async(dispatch_get_main_queue(), ^{
        NSString *backString = nil;
        if (count > 0 && count < 1000) {
            backString = [NSString stringWithFormat:@"返回(%d)", count];
        } else if (count >= 1000) {
            backString = @"返回(...)";
        } else {
            backString = @"返回";
        }
        UIButton *backBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        backBtn.frame = CGRectMake(0, 6, 87, 23);
        UIImageView *backImg = [[UIImageView alloc]
                                initWithImage:[UIImage imageNamed:@"navigator_btn_back"]];
        backImg.frame = CGRectMake(-6, 4, 10, 17);
        [backBtn addSubview:backImg];
        UILabel *backText =
        [[UILabel alloc] initWithFrame:CGRectMake(9, 4, 85, 17)];
        backText.text = backString;
        // NSLocalizedStringFromTable(@"Back",
        // @"RongCloudKit", nil);
        backText.font = [UIFont systemFontOfSize:17];
        [backText setBackgroundColor:[UIColor clearColor]];
        [backText setTextColor:EQDCOLOR];
        [backBtn addSubview:backText];
        [backBtn addTarget:__weakself
                    action:@selector(leftBarButtonItemPressed:)
          forControlEvents:UIControlEventTouchUpInside];
        UIBarButtonItem *leftButton =
        [[UIBarButtonItem alloc] initWithCustomView:backBtn];
        [__weakself.navigationItem setLeftBarButtonItem:leftButton];
    });
}



@end
